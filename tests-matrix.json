{
  "_comments": "Updated tests to 3-phase plan from LP:2116077 | Now emits METRIC: key=value lines for JSON summary enrichment.",
  "resource_group": "miriam-azure-vm-utils",
  "vm_name_pattern": "t-{series}-{type}-{size}",
  "matrix": {
    "series": [
      "plucky",
      "noble",
      "jammy"
    ],
    "types": [
      "amd64_server",
      "amd64_minimal",
      "amd64_fde",
      "arm64_server",
      "arm64_minimal"
    ],
    "sizes": [
      "Standard_E2ads_v6",
      "Standard_D2alds_v6",
      "Standard_D2ls_v6",
      "Standard_E2pds_v6",
      "Standard_D2pds_v6",
      "Standard_D2plds_v6"
    ],
    "_comment_sizes": "AMD64 -> E2ads_v6/D2alds_v6/D2ls_v6. ARM64 -> Cobalt 100 NVMe: E2pds_v6 (mem-optimized), D2pds_v6 (general-purpose), D2plds_v6 (GP 2 GiB/vCPU)."
  },
  "image_catalog": [
    {
      "series": "jammy",
      "type": "amd64_server",
      "offer": "0001-com-ubuntu-server-jammy",
      "sku": "22_04-lts-gen2",
      "_comments": "Gen2"
    },
    {
      "series": "jammy",
      "type": "amd64_minimal",
      "offer": "0001-com-ubuntu-minimal-jammy",
      "sku": "minimal-22_04-lts-gen2",
      "_comments": "Gen2"
    },
    {
      "series": "jammy",
      "type": "amd64_fde",
      "offer": "0001-com-ubuntu-confidential-vm-jammy",
      "sku": "22_04-lts-cvm",
      "_comments": "Gen2"
    },
    {
      "series": "jammy",
      "type": "arm64_server",
      "offer": "0001-com-ubuntu-server-jammy",
      "sku": "22_04-lts-arm64",
      "_comments": "Gen1"
    },
    {
      "series": "jammy",
      "type": "arm64_minimal",
      "offer": "0001-com-ubuntu-minimal-jammy",
      "sku": "minimal-22_04-lts-arm64",
      "_comments": "Gen1"
    },
    {
      "series": "noble",
      "type": "amd64_server",
      "offer": "ubuntu-24_04-lts",
      "sku": "server",
      "_comments": "Gen2"
    },
    {
      "series": "noble",
      "type": "amd64_minimal",
      "offer": "ubuntu-24_04-lts",
      "sku": "minimal",
      "_comments": "Gen2"
    },
    {
      "series": "noble",
      "type": "amd64_fde",
      "offer": "ubuntu-24_04-lts",
      "sku": "cvm",
      "_comments": "Gen2"
    },
    {
      "series": "noble",
      "type": "arm64_server",
      "offer": "ubuntu-24_04-lts",
      "sku": "server-arm64",
      "_comments": "Gen2"
    },
    {
      "series": "noble",
      "type": "arm64_minimal",
      "offer": "ubuntu-24_04-lts",
      "sku": "minimal-arm64",
      "_comments": "Gen2"
    },
    {
      "series": "plucky",
      "type": "amd64_server",
      "offer": "ubuntu-25_04",
      "sku": "server",
      "_comments": "Gen2"
    },
    {
      "series": "plucky",
      "type": "amd64_minimal",
      "offer": "ubuntu-25_04",
      "sku": "minimal",
      "_comments": "Gen2"
    },
    {
      "series": "plucky",
      "type": "arm64_server",
      "offer": "ubuntu-25_04",
      "sku": "server-arm64",
      "_comments": "Gen2"
    },
    {
      "series": "plucky",
      "type": "arm64_minimal",
      "offer": "ubuntu-25_04",
      "sku": "minimal-arm64",
      "_comments": "Gen2"
    }
  ],
  "tests": [
    {
      "name": "phase1-prechecks",
      "_comments": "Pre-checks of series, disks and networking (Test Plan). Emits METRIC lines.",
      "commands": [
        "source /etc/os-release && echo UBUNTU_CODENAME=$VERSION_CODENAME && echo UBUNTU_VERSION=$VERSION_ID && echo METRIC:ubuntu_codename=$VERSION_CODENAME && echo METRIC:ubuntu_version=$VERSION_ID",
        "uname -a",
        "if ! command -v nvme >/dev/null 2>&1; then sudo apt-get update -y && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y nvme-cli; fi",
        "if nvme list | grep -q \"Microsoft NVMe Direct Disk v2\"; then echo METRIC:has_nvme_v2=1; else echo METRIC:has_nvme_v2=0; fi",
        "if nvme list | grep -Eq \"MSFT NVMe Accelerator v1.0|Microsoft NVMe Direct Disk\"; then echo METRIC:has_nvme_legacy=1; else echo METRIC:has_nvme_legacy=0; fi",
        "networkctl status -a -l | grep -v \"$(date +%b)\" | tee net_before.txt",
        "DRIVERS_LINE=$(networkctl status $(ip a | grep SLAVE | cut -d':' -f2 | xargs) | grep -i driver || true); echo \"$DRIVERS_LINE\"; echo \"$DRIVERS_LINE\" | grep -E 'mana|mlx' >/dev/null && echo METRIC:net_drivers_present=1 || echo METRIC:net_drivers_present=0; echo \"$DRIVERS_LINE\" | grep -E 'mlx4|mlx5' >/dev/null && echo METRIC:net_has_mlx=1 || echo METRIC:net_has_mlx=0; echo \"$DRIVERS_LINE\" | grep -E 'mana' >/dev/null && echo METRIC:net_has_mana=1 || echo METRIC:net_has_mana=0",
        "UDEV_LINES=$(udevadm info /sys/class/net/$(ip a | grep SLAVE | cut -d':' -f2 | xargs) | grep -E 'AZURE_UNMANAGED_SRIOV|ID_NET_MANAGED_BY|ID_NET_DRIVER' || true); echo \"$UDEV_LINES\"; CNT=$(echo \"$UDEV_LINES\" | wc -l ); echo METRIC:net_udev_flag_count=$CNT; [ \"$CNT\" -eq 1 ] && echo METRIC:net_udev_flags_present=1 || echo METRIC:net_udev_flags_present=0"
      ]
    },
    {
      "name": "phase2-install-proposed-and-reboot",
      "_comments": "Install/upgrade azure-vm-utils from -proposed, enable networkd debug, reboot. Emits METRIC lines.",
      "commands": [
        "source /etc/os-release && echo CODENAME=$VERSION_CODENAME",
        "echo METRIC:proposed_enabled=1",
        "sudo bash -c 'source /etc/os-release; echo \"deb http://archive.ubuntu.com/ubuntu ${VERSION_CODENAME}-proposed main restricted universe multiverse\" > /etc/apt/sources.list.d/proposed.list'",
        "sudo bash -c 'source /etc/os-release; printf \"Package: *\\nPin: release a=%s-proposed\\nPin-Priority: 400\\n\" \"$VERSION_CODENAME\" > /etc/apt/preferences.d/proposed'",
        "sudo apt-get update -y",
        "sudo bash -c 'source /etc/os-release; DEBIAN_FRONTEND=noninteractive apt-get install -y -t ${VERSION_CODENAME}-proposed azure-vm-utils'",
        "AZVER=$(dpkg -s azure-vm-utils 2>/dev/null | awk -F\": \" '/^Version:/{print $2}'); echo METRIC:azure_vm_utils_version=${AZVER:-unknown}",
        "sudo mkdir -p /etc/systemd/system/systemd-networkd.service.d",
        "echo -e '[Service]\\nEnvironment=SYSTEMD_LOG_LEVEL=debug' | sudo tee /etc/systemd/system/systemd-networkd.service.d/10-debug.conf >/dev/null",
        "sudo systemctl daemon-reload && echo METRIC:networkd_debug=1",
        "#REBOOT#"
      ]
    },
    {
      "name": "phase3-postchecks",
      "_comments": "Post-checks (Manual tests). Emits METRIC lines.",
      "commands": [
        "AZVER=$(dpkg -s azure-vm-utils 2>/dev/null | awk -F\": \" '/^Version:/{print $2}'); echo METRIC:azure_vm_utils_version=${AZVER:-unknown}",
        "CNT_AZ=$(sudo journalctl -b -u systemd-networkd | grep -i azure | wc -l || true); echo METRIC:networkd_azure_lines=${CNT_AZ}",
        "CNT_UNM=$(sudo journalctl -b -u systemd-networkd | grep -i unmanaged | wc -l || true); echo METRIC:networkd_unmanaged_lines=${CNT_UNM}",
        "networkctl status -a -l | grep -v \"$(date +%b)\" | tee net_after.txt",
        "DIFFL=$(diff -u net_before.txt net_after.txt | wc -l || true); echo METRIC:network_diff_lines=${DIFFL}",
        "DEVV2=$(nvme list | awk '/Microsoft NVMe Direct Disk v2/ {print $1; exit}'); if [ -n \"$DEVV2\" ]; then if sudo azure-nvme-id --udev \"$DEVV2\" >/dev/null 2>&1; then echo METRIC:azure_nvme_id_ok=1; else echo METRIC:azure_nvme_id_ok=0; fi; else echo METRIC:azure_nvme_id_ok=-1; fi",
        "nvme list | grep -F \"MSFT NVMe Accelerator v1.0\" -q && echo METRIC:has_nvme_accel=1 || echo METRIC:has_nvme_accel=0",
        "nvme list | grep -F \"Microsoft NVMe Direct Disk v2\" -q && echo METRIC:has_nvme_v2=1 || echo METRIC:has_nvme_v2=0",
        "nvme list | grep -F \"Microsoft NVMe Direct Disk\" | grep -v \"v2\" -q && echo METRIC:has_nvme_legacy=1 || echo METRIC:has_nvme_legacy=0",
        "ACCEL_INFO=$(udevadm info $(nvme list | grep -F \"MSFT NVMe Accelerator v1.0\" | awk '{print $1}') 2>/dev/null | grep -i -E 'model|azure' || true); echo \"$ACCEL_INFO\"; [ -n \"$ACCEL_INFO\" ] && echo METRIC:nvme_symlink_accel_present=1 || echo METRIC:nvme_symlink_accel_present=0",
        "LEGACY_INFO=$(udevadm info $(nvme list | grep -F \"Microsoft NVMe Direct Disk\" | grep -v \"v2\" | awk '{print $1}') 2>/dev/null | grep -i -E 'model|azure' || true); echo \"$LEGACY_INFO\"; [ -n \"$LEGACY_INFO\" ] && echo METRIC:nvme_symlink_legacy_present=1 || echo METRIC:nvme_symlink_legacy_present=0",
        "V2_INFO=$(udevadm info $(nvme list | grep -F \"Microsoft NVMe Direct Disk v2\" | awk '{print $1}') 2>/dev/null | grep -i -E 'model|azure' || true); echo \"$V2_INFO\"; [ -n \"$V2_INFO\" ] && echo METRIC:nvme_symlink_v2_present=1 || echo METRIC:nvme_symlink_v2_present=0",
        "echo METRIC:nvme_symlink_checks_done=1",
        "UDEV_LINES=$(udevadm info /sys/class/net/$(ip a | grep SLAVE | cut -d':' -f2 | xargs) | grep -E 'AZURE_UNMANAGED_SRIOV|ID_NET_MANAGED_BY|ID_NET_DRIVER' || true); echo \"$UDEV_LINES\"; CNT=$(printf \"%s\" \"$UDEV_LINES\" | wc -l ); echo METRIC:net_all_udev_flag_count=$CNT; [ \"$CNT\" -eq 3 ] && echo METRIC:net_all_udev_flags_present=1 || echo METRIC:net_all_udev_flags_present=0",
        "if ! command -v unmkinitramfs >/dev/null 2>&1; then sudo DEBIAN_FRONTEND=noninteractive apt-get install -y initramfs-tools; fi",
        "rm -rf initramfs && mkdir -p initramfs && sudo unmkinitramfs /boot/initrd.img-$(uname -r) initramfs/",
        "RULES=$(find initramfs/*/lib/udev/rules.d -maxdepth 1 -type f -name '*0*azure*' | wc -l | tr -d ' '); echo METRIC:initrd_azure_rules=${RULES}"
      ]
    }
  ],
 "policies": {
  "_comments": "Policy rules are data-driven. 'when'is opcional; 'require' accepts all_of / any_of or a simple condition.",
  "global": [
    {
      "name": "phase1_network_driver_present",
      "message": "Network driver should be present (mana or mlx).",
      "require": { "metric": "net_drivers_present", "op": "eq", "value": 1 },
      "phase_at_least": 1
    },
    {
      "name": "phase1_network_udev_flags_present",
      "message": "udevadm should show AZURE_UNMANAGED_SRIOV / ID_NET_MANAGED_BY / ID_NET_DRIVER.",
      "require": { "metric": "net_udev_flags_present", "op": "eq", "value": 1 },
      "phase_at_least": 1
    },
    {
      "name": "nvme_v2_requires_udev_and_tool",
      "message": "When NVMe v2 is present, azure-nvme-id must succeed",
      "when": [ { "metric": "has_nvme_v2", "op": "eq", "value": 1 } ],
      "require": { "metric": "azure_nvme_id_ok", "op": "eq", "value": 1 },
      "phase_at_least": 3
    },
    {
      "name": "phase2_expectations",
      "message": "After phase2, -proposed enabled, networkd in debug, and azure-vm-utils installed.",
      "require": {
        "all_of": [
          { "metric": "proposed_enabled",       "op": "eq", "value": 1 },
          { "metric": "networkd_debug",         "op": "eq", "value": 1 },
          { "metric": "azure_vm_utils_version", "op": "ne", "value": "unknown" }
        ]
      },
      "phase_at_least": 2
    },
    {
      "name": "nvme_symlink_v2_when_present",
      "message": "udevadm info should show model/azure for NVMe v2 devices.",
      "when":   [
        { "metric": "nvme_symlink_checks_done", "op": "eq", "value": 1 },
        { "metric": "has_nvme_v2",              "op": "eq", "value": 1 }
      ],
      "require": { "metric": "nvme_symlink_v2_present", "op": "eq", "value": 1 },
      "phase_at_least": 3
    },
    {
      "name": "nvme_symlink_legacy_when_present",
      "message": "udevadm info should show model/azure for legacy NVMe devices.",
      "when":   [
        { "metric": "nvme_symlink_checks_done", "op": "eq", "value": 1 },
        { "metric": "has_nvme_legacy",          "op": "eq", "value": 1 }
      ],
      "require": { "metric": "nvme_symlink_legacy_present", "op": "eq", "value": 1 },
      "phase_at_least": 3
    },
    {
      "name": "nvme_symlink_accel_when_present",
      "message": "udevadm info should show model/azure for MSFT NVMe Accelerator devices.",
      "when":   [
        { "metric": "nvme_symlink_checks_done", "op": "eq", "value": 1 },
        { "metric": "has_nvme_accel",           "op": "eq", "value": 1 }
      ],
      "require": { "metric": "nvme_symlink_accel_present", "op": "eq", "value": 1 },
      "phase_at_least": 3
    },
    {
      "name": "phase3_udev_lines_present",
      "message": "udevadm info shows exactly 1 line before azure-vm-utils is installed and 3 after that.",
      "require": {
        "all_of": [
          { "metric": "net_udev_flags_present",      "op": "eq", "value": 1 },
          { "metric": "net_all_udev_flags_present",  "op": "eq", "value": 1 }
        ]
      },
      "phase_at_least": 3
    }
  ],
  "by_combo": [
    {
      "name": "amd_e2ads_nvme_or_legacy_and_mlx",
      "match": { "type_glob": "amd64_*", "size": "Standard_E2ads_v6" },
      "require": {
        "all_of": [
          {
            "any_of": [
              { "metric": "has_nvme_v2",     "op": "eq", "value": 1 },
              { "metric": "has_nvme_legacy", "op": "eq", "value": 1 }
            ]
          },
          { "metric": "net_has_mlx", "op": "eq", "value": 1 }
        ]
      },
      "message": "E2ads_v6 expects NVMe (v2 or legacy) and Mellanox NIC.",
      "phase_at_least": 3
    },
    {
      "name": "amd_d2alds_legacy_nvme",
      "match": { "type_glob": "amd64_*", "size": "Standard_D2alds_v6" },
      "require": { "all_of": [ { "metric": "has_nvme_legacy", "op": "eq", "value": 1 } ] },
      "message": "D2alds_v6 expects legacy NVMe.",
      "phase_at_least": 3
    },
    {
      "name": "amd_d2ls_mana",
      "match": { "type_glob": "amd64_*", "size": "Standard_D2ls_v6" },
      "require": { "all_of": [ { "metric": "net_has_mana", "op": "eq", "value": 1 } ] },
      "message": "D2ls_v6 expects MANA NIC.",
      "phase_at_least": 1
    },
    {
      "name": "arm_cobalt_nvme",
      "match": { "type_glob": "arm64_*", "size_in": ["Standard_E2pds_v6", "Standard_D2pds_v6", "Standard_D2plds_v6"] },
      "require": {
        "any_of": [
          { "metric": "has_nvme_v2",     "op": "eq", "value": 1 },
          { "metric": "has_nvme_legacy", "op": "eq", "value": 1 }
        ]
      },
      "message": "ARM64 Cobalt sizes expect NVMe (v2 or legacy).",
      "phase_at_least": 3
    }
  ]
}
}